bad_ip_df = pd.DataFrame(columns=['ip', 'packet_count', 'percent_increase', 'cluster'])
for ip, row in df.iterrows():
    feature_row = row[:-1]
    cluster_value = row[-1]
    #cluster test
    if ip in train_df.index:
        packet_count = feature_row.sum()
        train_cluster = train_df.loc[ip]['cluster']
        #Train packet count
        train_packet_count = train_df.loc[ip]['packet_count']
        #Check how many percent increase in the average packet count
        percent_increase = ((packet_count - train_packet_count) / train_packet_count) * 100
        #Check the cluster value
        if(cluster_value == train_cluster):
            #SVM test: Check if its inside the boundary using one class svm
            X_test_tran = scaler_dict[cluster_value].transform([feature_row.values])
            #Check if its inside the cluster boundry using classifier
            prediction = clf_dict[cluster_value].predict(X_test_tran)
            if prediction == - 1:
                s = pd.Series([ip, packet_count, percent_increase, cluster_value], index=bad_ip_df.columns)
                bad_ip_df = bad_ip_df.append(s, ignore_index=True)
        else:
            s = pd.Series([ip, packet_count, percent_increase, cluster_value], index=bad_ip_df.columns)
            bad_ip_df = bad_ip_df.append(s, ignore_index=True)

bad_ip_df = bad_ip_df.set_index('ip')
print(bad_ip_df)
